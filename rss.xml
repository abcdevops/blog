<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="https://abcdevops.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://abcdevops.com/" rel="alternate" type="text/html" /><updated>2020-07-23T02:58:42-04:00</updated><id>https://abcdevops.com/</id><title>ABCDevOps: re:devining DevOps</title><subtitle>ABCDevOps: Let&#39;s discuss what devops is.</subtitle><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><entry><title>Frontend Engineers Wanted!</title><link href="https://abcdevops.com/blog/2020/06/03/hiring-ad-two.html" rel="alternate" type="text/html" title="Frontend Engineers Wanted!" /><published>2020-06-03T00:00:00-04:00</published><updated>2020-06-03T00:00:00-04:00</updated><id>https://abcdevops.com/blog/2020/06/03/hiring-ad-two</id><content type="html" xml:base="https://abcdevops.com/blog/2020/06/03/hiring-ad-two.html">&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/banner2.png&quot; alt=&quot;We are hiring Freshers&quot; /&gt;
&lt;a href=&quot;/career.html#carrier-form&quot; class=&quot;button mt-20&quot;&gt;Apply Now&lt;/a&gt;&lt;/p&gt;</content><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><category term="Hiring" /><category term="Freshers" /><category term="Angular" /><category term="React" /><category term="Developer" /><category term="React-native" /><category term="Javascript" /><category term="Vue JS" /><summary></summary></entry><entry><title>App development Jobs</title><link href="https://abcdevops.com/blog/2020/06/03/hiring-ad-three.html" rel="alternate" type="text/html" title="App development Jobs" /><published>2020-06-03T00:00:00-04:00</published><updated>2020-06-03T00:00:00-04:00</updated><id>https://abcdevops.com/blog/2020/06/03/hiring-ad-three</id><content type="html" xml:base="https://abcdevops.com/blog/2020/06/03/hiring-ad-three.html">&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/banner3.png&quot; alt=&quot;We are hiring Freshers&quot; /&gt;
&lt;a href=&quot;/career.html#carrier-form&quot; class=&quot;button mt-20&quot;&gt;Apply Now&lt;/a&gt;&lt;/p&gt;</content><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><category term="Hiring" /><category term="Freshers" /><category term="App-Development" /><category term="Frontend" /><category term="Developer" /><category term="Hybrid-Apps" /><category term="Native-Apps" /><category term="Flutter" /><category term="React-native" /><category term="Fusetools" /><category term="Ionic" /><summary></summary></entry><entry><title>Back-End Developers Needed</title><link href="https://abcdevops.com/blog/2020/06/03/hiring-ad-one.html" rel="alternate" type="text/html" title="Back-End Developers Needed" /><published>2020-06-03T00:00:00-04:00</published><updated>2020-06-03T00:00:00-04:00</updated><id>https://abcdevops.com/blog/2020/06/03/hiring-ad-one</id><content type="html" xml:base="https://abcdevops.com/blog/2020/06/03/hiring-ad-one.html">&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/banner1.jpg&quot; alt=&quot;We are hiring Freshers&quot; /&gt;
&lt;a href=&quot;/career.html#carrier-form&quot; class=&quot;button mt-20&quot;&gt;Apply Now&lt;/a&gt;&lt;/p&gt;</content><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><category term="Hiring" /><category term="Freshers" /><category term="Back-End" /><category term="PHP" /><category term="Node JS" /><category term="Python" /><summary></summary></entry><entry><title>Jobs for DevOps</title><link href="https://abcdevops.com/blog/2020/06/03/hiring-ad-four.html" rel="alternate" type="text/html" title="Jobs for DevOps" /><published>2020-06-03T00:00:00-04:00</published><updated>2020-06-03T00:00:00-04:00</updated><id>https://abcdevops.com/blog/2020/06/03/hiring-ad-four</id><content type="html" xml:base="https://abcdevops.com/blog/2020/06/03/hiring-ad-four.html">&lt;!--more--&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/banner4.png&quot; alt=&quot;We are hiring Freshers&quot; /&gt;
&lt;a href=&quot;/career.html#carrier-form&quot; class=&quot;button mt-20&quot;&gt;Apply Now&lt;/a&gt;&lt;/p&gt;</content><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><category term="Hiring" /><category term="Freshers" /><category term="Back-End" /><category term="Developer" /><category term="DevOps" /><category term="Cloud-Computing" /><category term="AWS" /><category term="Azure" /><category term="GCP" /><summary></summary></entry><entry><title>Flutter: Internationalization &amp;amp; Switching Locales Manually</title><link href="https://abcdevops.com/blog/2019/07/01/Flutter-Internationalization-with-Manual-Locale-switch.html" rel="alternate" type="text/html" title="Flutter: Internationalization &amp; Switching Locales Manually" /><published>2019-07-01T00:00:00-04:00</published><updated>2019-07-01T00:00:00-04:00</updated><id>https://abcdevops.com/blog/2019/07/01/Flutter-Internationalization-with-Manual-Locale-switch</id><content type="html" xml:base="https://abcdevops.com/blog/2019/07/01/Flutter-Internationalization-with-Manual-Locale-switch.html">&lt;p&gt;At times you will have to make your Flutter app support different language or “locale” or in other words make your app Internationalized. &lt;!--more--&gt;
Flutter provides widgets &amp;amp; classes that help with this and the Flutter libraries themselves are internationalized. In the following tutorials we’ll use the APIs and tools provided by the intl package. If you’re new Dart’s intl package, i suggest you have a look at the &lt;a href=&quot;https://flutter.dev/docs/development/accessibility-and-localization/internationalization#dart-tools&quot;&gt;Dart intl tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you might know Flutter is now taking over vast majority of market, so if you’re a software developer there is 99.9% chance that you will come across this. So here’s an easy step by step tutorial for internationalization of your flutter app, also we’ll see how to manually switch your App’s Locale on specific events. I’ll assume you know how to setup a flutter app so we’ll skip that part. Alrighty then Avengers! Assemble!!&lt;/p&gt;

&lt;p&gt;So first step is to Include the packages in &lt;code&gt;pubspec.yaml&lt;/code&gt; file. For that just add the 2 packages name under  the dependencies. It would look something like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter
    
  intl_translation: ^0.17.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you save this, flutter automatically downloads and include the packages. You can now use it in your app anywhere simply by importing it. We’ll import it in the main.dart file first. Goto you &lt;code&gt;main.dart&lt;/code&gt; file and add import the package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dart&quot;&gt;import &#39;package:flutter_localizations/flutter_localizations.dart&#39;;
import &#39;package:intl/intl.dart&#39;;
void main() =&amp;gt; runApp(MyApp());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step is to setup the Localization delegates in your &lt;code&gt;main.dart&lt;/code&gt; file. For that you need to specify the 2 delegates first.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dart&quot;&gt;  Widget build(BuildContext context) {
    return MaterialApp(
      localizationsDelegates: [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate
      ],
      supportedLocales: [
        const Locale(&#39;en&#39;, &#39;US&#39;),
        const Locale(&#39;de&#39;, &#39;DE&#39;)
      ],
      ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;GlobalMaterialLocalizations.delegate&lt;/code&gt; provides localized strings and other values for the Material Components library. &lt;code&gt;GlobalWidgetsLocalizations.delegate&lt;/code&gt; defines the default text direction, either left to right or right to left, for the widgets library.
As you can see here, we added 2 lists to our Material app &lt;code&gt;localizationsDelegates&lt;/code&gt; &amp;amp; &lt;code&gt;supportedLocales&lt;/code&gt;. The &lt;code&gt;supportedLocales&lt;/code&gt; parameter holds the list of languages that our app will support. Here you will specify list of languages_codes.&lt;/p&gt;

&lt;h2 id=&quot;create-a-file-on-path-liblocaleapp_localizationdart&quot;&gt;Create a file on path /lib/locale/app_localization.dart&lt;/h2&gt;

&lt;p&gt;Next step is to create an &lt;code&gt;AppLocalization&lt;/code&gt; &amp;amp; &lt;code&gt;AppLocalizationDelegate&lt;/code&gt;. Classes in which we’ll be defining our keywords and their translations. We’ll also use it throughout the app and for manually switching the Locale if required. Therefore i suggest you create this class in a Separate folder in  your lib directory. Mine looks like &lt;code&gt;/lib/locale/app_localization.dart&lt;/code&gt;
The AppLocalization class will only have 2 static methods for now. The &lt;code&gt;load()&lt;/code&gt; &amp;amp; &lt;code&gt;of()&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dart&quot;&gt;import &#39;package:flutter/material.dart&#39;;
import &#39;package:intl/intl.dart&#39;;

class AppLocalization {
  
  static Future&amp;lt;AppLocalization&amp;gt; load(Locale locale) {
    final String name = locale.countryCode.isEmpty ? locale.languageCode : locale.toString();
    final String localeName = Intl.canonicalizedLocale(name);
    return initializeMessages(localeName).then((_) {
      Intl.defaultLocale = localeName;
      return AppLocalization();
    });
  }

  static AppLocalization of(BuildContext context) {
    return Localizations.of&amp;lt;AppLocalization&amp;gt;(context, AppLocalization);
  }
  
  // list of locales
  String get heyWorld {
    return Intl.message(
      &#39;Hey World&#39;,
      name: &#39;heyWorld&#39;,
      desc: &#39;Simpel word for greeting &#39;,
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;PS: NOTE THAT YOUR &lt;code&gt;load()&lt;/code&gt; might be returning an error on the line: &lt;code&gt;return initializeMessages()&lt;/code&gt; ignore this for now, we’ll remove it in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/error-at-initializeMessages.png&quot; alt=&quot;error at initializeMessages&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;load()&lt;/code&gt; : It will load/set all the Localized values. You can also call this method if you wish to switch the locale of app manually.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;of()&lt;/code&gt; : This method will return the instance of current Localization of the app. Somewhat like a factory method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;get heyWorld&lt;/code&gt;: This getter returns the value of the heyWorld. This property is what will be using to get its  translations based on locale of the app. For demo purpose i have only set 1 String as for now but you can as many as you can.&lt;/p&gt;

&lt;h2 id=&quot;create-a-applocalizationdelegate-in-the-applocalization-class&quot;&gt;Create a AppLocalizationDelegate in the AppLocalization class&lt;/h2&gt;

&lt;p&gt;Now create an &lt;code&gt;AppLocalizationDelegate&lt;/code&gt; for the &lt;code&gt;AppLocalization&lt;/code&gt; class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dart&quot;&gt;class AppLocalizationDelegate extends LocalizationsDelegate&amp;lt;AppLocalization&amp;gt;{
  final Locale overriddenLocale;

  const AppLocalizationDelegate(this.overriddenLocale);

  @override
  bool isSupported(Locale locale) =&amp;gt; [&#39;en&#39;, &#39;de&#39;].contains(locale.languageCode);

  @override
  Future&amp;lt;AppLocalization&amp;gt; load(Locale locale) =&amp;gt; AppLocalization.load(locale);

  @override
  bool shouldReload(LocalizationsDelegate&amp;lt;AppLocalization&amp;gt; old) =&amp;gt; false; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see this Delegate class is extended from main  &lt;code&gt;LocalizationsDelegate&lt;/code&gt; and we have pointed it to &lt;code&gt;AppLocalization&lt;/code&gt; via &lt;code&gt;&amp;lt;AppLocalization&amp;gt;&lt;/code&gt;
add the above required methods and take a look at the &lt;code&gt;isSupported()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@override
bool isSupported(Locale locale)=&amp;gt;[&#39;en&#39;,&#39;de&#39;].contains(locale.languageCode);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method will be called to check if the language is supported or not, based on the Locale instance provided. &lt;strong&gt;Make sure to you have your supported languages inserted in this list here such as: [‘en’, ‘de’ ….]&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-a-libl10n-directory-in-your-libfolder&quot;&gt;Create a lib/l10n Directory in your lib folder&lt;/h2&gt;
&lt;p&gt;Now create a l10n directory in your lib folder. This directory will hold all the translated values as per your Locale. Your final directory structure will look somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/l10n-folder.png&quot; alt=&quot;l10n-folder&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;create-resource-bundles-arbfiles&quot;&gt;Create resource bundles (.arb files)&lt;/h2&gt;
&lt;p&gt;In your Terminal and run the following command to create the arb files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ flutter pub run intl_translation:extract_to_arb --output-dir=lib/l10n lib/locale/app_localization.dart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will now see a new file in your l10n folder &lt;code&gt;intl_messages.arb&lt;/code&gt; . Cool!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/intl-messages-arb.png&quot; alt=&quot;intl-messagse-arb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NOTE: The Dart intl package only creates one template file of .arb  from your Localization class and names it &lt;code&gt;intl_messages.arb&lt;/code&gt;. From here you now have to manually create other resource  files with convention &lt;code&gt;intl_[LANGUAGE_CODE].arb&lt;/code&gt; and copy the content of &lt;code&gt;intl_messages.arb&lt;/code&gt; directly with updated the values.&lt;/p&gt;

&lt;p&gt;For eg: For English format you will create file &lt;code&gt;intl_en.arb&lt;/code&gt; and the content copied from &lt;code&gt;intl_messages.arb &lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;{
  &quot;@@last_modified&quot;: &quot;2019-06-27T22:25:57.081431&quot;,
  &quot;heyWorld&quot;: &quot;Hey World&quot;,
  &quot;@heyWorld&quot;: {
    &quot;description&quot;: &quot;Simple world for greeting &quot;,
    &quot;type&quot;: &quot;text&quot;,
    &quot;placeholders&quot;: {}
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now lets create one in German language. So this will be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;{
  &quot;@@last_modified&quot;: &quot;2019-06-27T23:38:38.868199&quot;,
  &quot;heyWorld&quot;: &quot;Hey Welt&quot;,
  &quot;@heyWorld&quot;: {
    &quot;description&quot;: &quot;Einfaches Wort zur Begrüßung&quot;,
    &quot;type&quot;: &quot;text&quot;,
    &quot;placeholders&quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/images/posts/intl-de-arb.png&quot; alt=&quot;intl-de-arb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you created these files in your l10n folder. Now you need to run another command to create the corresponding .dart files that will be used to manage these resource files. For that run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ flutter pub run intl_translation:generate_from_arb \
--output-dir=lib/l10n --no-use-deferred-loading \
lib/l10n/intl_messages.arb lib/l10n/intl_de.arb lib/l10n/intl_en.arb lib/locale/app_localization.dart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTE that i have only 2 files &lt;code&gt;intl_en.arb&lt;/code&gt; &amp;amp; &lt;code&gt;intl_de.arb&lt;/code&gt; therefore i am only passing those in command. But if you have more or less you need to pass them all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/intl-messages-dart.png&quot; alt=&quot;intl-messages-dart&quot; /&gt;
&lt;em&gt;Now check your l10n folder you will now see new dart files created from those resource files.
Btw you might see some warnings in the console, but its ok. just ignore them.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now import the &lt;code&gt;messages_all.dart&lt;/code&gt; file in your &lt;code&gt;AppLocalization&lt;/code&gt; Class and here’s a final look at your &lt;code&gt;AppLocalization&lt;/code&gt; Class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dart&quot;&gt;import &#39;dart:async&#39;;
import &#39;package:flutter/material.dart&#39;;
import &#39;package:intl/intl.dart&#39;;
import &#39;../l10n/messages_all.dart&#39;;

class AppLocalization {
  
  static Future&amp;lt;AppLocalization&amp;gt; load(Locale locale) {
    final String name = locale.countryCode.isEmpty ? locale.languageCode : locale.toString();
    final String localeName = Intl.canonicalizedLocale(name);
    return initializeMessages(localeName).then((_) {
      Intl.defaultLocale = localeName;
      return AppLocalization();
    });
  }

  static AppLocalization of(BuildContext context) {
    return Localizations.of&amp;lt;AppLocalization&amp;gt;(context, AppLocalization);
  }

  String get heyWorld {
    return Intl.message(
      &#39;Hey World&#39;,
      name: &#39;heyWorld&#39;,
      desc: &#39;Simpel word for greeting &#39;,
    );
  }
}

class AppLocalizationDelegate extends LocalizationsDelegate&amp;lt;AppLocalization&amp;gt; {
  final Locale overriddenLocale;

  const AppLocalizationDelegate(this.overriddenLocale);

  @override
  bool isSupported(Locale locale) =&amp;gt; [&#39;en&#39;, &#39;es&#39;, &#39;de&#39;].contains(locale.languageCode);

  @override
  Future&amp;lt;AppLocalization&amp;gt; load(Locale locale) =&amp;gt; AppLocalization.load(locale);
  
  @override
  bool shouldReload(LocalizationsDelegate&amp;lt;AppLocalization&amp;gt; old) =&amp;gt; false;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;The error is gone! right. ;)&lt;/em&gt;&lt;/strong&gt;
Now you’re just 1 step from using the language values based on your current Localization. To use language specific text in your app, you’ll simply need to follow the 2 steps :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;import AppLocalization class where you want to use the text&lt;/li&gt;
  &lt;li&gt;Call localized value of text via: &lt;code&gt;AppLocalizations.of(context).heyWorld&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now what is happening here is when you call the above method, it calls the getter of the &lt;code&gt;AppLocalization&lt;/code&gt; class and returns its value based on the Locale of the context. Which means.. &lt;/p&gt;

&lt;p&gt;If the context is en (ie english) it will return the value from &lt;code&gt;intl_en.arb&lt;/code&gt; and when the Locale changes to de ( ie german) it will return the value from &lt;code&gt;intl_de.arb&lt;/code&gt;. And since we’re using only Class getter for both languages ie &lt;code&gt;heyWorld&lt;/code&gt; therefore need not to worry about the that as well. Flutter will take care of that. Now here comes the best part.&lt;/p&gt;

&lt;h2 id=&quot;finally-update-maindart-file&quot;&gt;Finally update main.dart file&lt;/h2&gt;
&lt;p&gt;In your main.dart file and in your main Class set a new property &lt;code&gt;_localOverrideDelegate&lt;/code&gt; in the &lt;code&gt;_MyAppState&lt;/code&gt; and give it a default initial value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AppLocalizationDelegate _localeOverrideDelegate = AppLocalizationDelegate(Locale(&#39;en&#39;, &#39;US&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;later we’ll be changing the state of Locale on custom event. Now add this parameter in the list of &lt;code&gt;_localizationDelegates&lt;/code&gt; in your main file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dart&quot;&gt;return new MaterialApp(
        ....,
        localizationsDelegates: [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        _localeOverrideDelegate
    ],
    home: Scaffold(...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats it! you’re all set to use you language files code. Now each place where you’ve used the convention: &lt;code&gt;AppLocalizations.of(context).[GETTER_KEY]&lt;/code&gt; the text will return the Localized value always. Now here’s the best part!&lt;/p&gt;

&lt;h2 id=&quot;switch-the-applocalization-on-customevents&quot;&gt;Switch the AppLocalization on custom events&lt;/h2&gt;
&lt;p&gt;To switch the Localization is real easy now. You only have to call the &lt;code&gt;load()&lt;/code&gt; method with the instance of &lt;code&gt;Locale([LANGUAGE_CODE], [SUBTAG])&lt;/code&gt; as argument. Like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;For English US:
    AppLocalization.load(Locale(&#39;en&#39;, &#39;US&#39;));
For German DE:
    AppLocalization.load(Locale(&#39;de&#39;, &#39;DE&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty easy! right. And yes, you can call it on &lt;code&gt;onPressed()&lt;/code&gt; events on buttons or any other. &lt;/p&gt;

&lt;p&gt;Lets see a working example I’ll be switching the app Localization on click of a button. I’ll be adding a simple 2 buttons on the page and a &lt;code&gt;heyWorld&lt;/code&gt; text in the center. On click of button the &lt;code&gt;AppLocalization&lt;/code&gt; will switch over.
&lt;img src=&quot;/images/posts/flutter-Localization.gif&quot; alt=&quot;flutter-Localization&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is snippet of my main.dart file&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-dart&quot;&gt;import &#39;package:flutter/material.dart&#39;;
import &#39;package:flutter_localizations/flutter_localizations.dart&#39;;
import &#39;locale/app_localization.dart&#39;;
import &#39;package:intl/intl.dart&#39;;

void main() =&amp;gt; runApp(MyApp());

class MyApp extends StatefulWidget {
  @override
  State&amp;lt;StatefulWidget&amp;gt; createState() =&amp;gt; _MyAppState();
}

class _MyAppState extends State&amp;lt;MyApp&amp;gt; {
  // This widget is the root of your application.
  AppLocalizationDelegate _localeOverrideDelegate =
      AppLocalizationDelegate(Locale(&#39;en&#39;, &#39;US&#39;));

  @override
  Widget build(BuildContext context) {
    return new MaterialApp(localizationsDelegates: [
      GlobalMaterialLocalizations.delegate,
      GlobalWidgetsLocalizations.delegate,
      _localeOverrideDelegate
    ], supportedLocales: [
      const Locale(&#39;en&#39;, &#39;US&#39;),
      const Locale(&#39;de&#39;, &#39;DE&#39;)
    ], 
    home: MyHomePage());
  }
}

class MyHomePage extends StatefulWidget {
  @override
  State&amp;lt;StatefulWidget&amp;gt; createState() =&amp;gt; _MyHomePageState();
}

class _MyHomePageState extends State&amp;lt;MyHomePage&amp;gt; {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
          // title: Text(AppLocalization.of(context).heyWorld),
          ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: &amp;lt;Widget&amp;gt;[
          Expanded(
            flex: 1,
            child: ListTile(
              leading: RaisedButton(
                onPressed: () {
                  setState(() {
                    AppLocalization.load(Locale(&#39;en&#39;, &#39;US&#39;));
                  });
                },
                child: Text(&#39;ENGLISH&#39;),
              ),
              trailing: RaisedButton(
                onPressed: () {
                  setState(() {
                    AppLocalization.load(Locale(&#39;de&#39;, &#39;DE&#39;));
                  });
                },
                child: Text(&#39;GERMAN&#39;),
              ),
            ),
          ),
          Expanded(
            flex: 1,
            child: Text(
              AppLocalization.of(context).heyWorld,
              style: TextStyle(fontSize: 20),
            ),
          )
        ],
      ),
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and here is the &lt;a href=&quot;https://github.com/abcdevops/flutter-tutorials/tree/master/internationalization&quot;&gt;link&lt;/a&gt; to full working example. Enjoy and Keep Fluttering!&lt;/p&gt;</content><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><category term="flutter" /><category term="localization" /><category term="app-translation" /><category term="internationalization" /><category term="tutorial" /><category term="locales" /><category term="flutter_localizations" /><summary>At times you will have to make your Flutter app support different language or “locale” or in other words make your app Internationalized.</summary></entry><entry><title>WOW! sending data to the could is thaaat easy :)</title><link href="https://abcdevops.com/blog/2019/06/25/what-is-cloud.html" rel="alternate" type="text/html" title="WOW! sending data to the could is thaaat easy :)" /><published>2019-06-25T00:00:00-04:00</published><updated>2019-06-25T00:00:00-04:00</updated><id>https://abcdevops.com/blog/2019/06/25/what-is-cloud</id><content type="html" xml:base="https://abcdevops.com/blog/2019/06/25/what-is-cloud.html">&lt;p&gt;How it would be if sending data to the cloud is that easy? #AWS, #Azure, #Cloud, #Google, #GCP.
&lt;!--more--&gt;
&lt;img src=&quot;/images/posts/send-data-to-cloud-black.jpg&quot; alt=&quot;before devops vs after devops&quot; /&gt;&lt;/p&gt;</content><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><category term="Azure" /><category term="AWS" /><category term="GCP" /><category term="DevToon" /><summary>How it would be if sending data to the cloud is that easy? #AWS, #Azure, #Cloud, #Google, #GCP.</summary></entry><entry><title>Applcation development before DevOps vs after DevOps.</title><link href="https://abcdevops.com/blog/2019/06/24/before-devops.html" rel="alternate" type="text/html" title="Applcation development before DevOps vs after DevOps." /><published>2019-06-24T00:00:00-04:00</published><updated>2019-06-24T00:00:00-04:00</updated><id>https://abcdevops.com/blog/2019/06/24/before-devops</id><content type="html" xml:base="https://abcdevops.com/blog/2019/06/24/before-devops.html">&lt;p&gt;&lt;strong&gt;Application development before DevOps vs after DevOps.&lt;/strong&gt;
&lt;!--more--&gt;
&lt;img src=&quot;/images/posts/before-devops.png&quot; alt=&quot;before devops vs after devops&quot; /&gt;&lt;/p&gt;</content><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><category term="Azure" /><category term="AWS" /><category term="GCP" /><category term="DevToon" /><summary>Application development before DevOps vs after DevOps.</summary></entry><entry><title>What, Servers are on strike. We need some superman?</title><link href="https://abcdevops.com/blog/2019/06/05/servers-on-strike.html" rel="alternate" type="text/html" title="What, Servers are on strike. We need some superman?" /><published>2019-06-05T00:00:00-04:00</published><updated>2019-06-05T00:00:00-04:00</updated><id>https://abcdevops.com/blog/2019/06/05/servers-on-strike</id><content type="html" xml:base="https://abcdevops.com/blog/2019/06/05/servers-on-strike.html">&lt;p&gt;&lt;strong&gt;Allow #ABCDevOps to be the #UnionLeader and keep your servers in your service.&lt;/strong&gt;
&lt;!--more--&gt;
&lt;img src=&quot;/images/posts/servers-are-off.jpg&quot; alt=&quot;Where are you going? Our clients are still in queue.&quot; /&gt;&lt;/p&gt;</content><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><category term="Azure" /><category term="AWS" /><category term="GCP" /><category term="DevToon" /><summary>Allow #ABCDevOps to be the #UnionLeader and keep your servers in your service.</summary></entry><entry><title>Amazon EC2 - Elastic Cloud Computing</title><link href="https://abcdevops.com/blog/2016/03/02/amazon-EC2.html" rel="alternate" type="text/html" title="Amazon EC2 - Elastic Cloud Computing" /><published>2016-03-02T00:00:00-05:00</published><updated>2016-03-02T00:00:00-05:00</updated><id>https://abcdevops.com/blog/2016/03/02/amazon-EC2</id><content type="html" xml:base="https://abcdevops.com/blog/2016/03/02/amazon-EC2.html">&lt;p&gt;Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides re-sizable compute capacity in the cloud. &lt;!--more--&gt;
Amazon EC2 reduces the time required to obtain and boot new server instances to minutes, allowing you to quickly scale capacity, both up and down, as your computing requirements change.&lt;/p&gt;

&lt;p&gt;We are working from last 10 years in IT I remember time where if we needed a new Active Directory Server or a new SQL Server we have to go to HP or go to DELL order new servers we then had to get deliver to our data centers we had to get racked we had to do the networking setup them the internet accessible etc and you know your provisioning time should be anywhere from 5 to 10 business days. Then i started public cloud and was really exciting to see the capabilities of cloud in step having of 5 to 10 days lead time you would reduce to literally just couple of minutes you can have that server up and running so that’s really how cloud computing change the IT industry in the last 5 to 10 years so Amazon EC2 changes the economics of computing by allowing you to pay only for capacity that you actually use. Amazon EC2 provides developers the tools to build failure resilient applications and isolate themselves from common failure scenarios. So we just look at the first section the advantage of the cloud computing is utility based model you can pay only by the hour. If you want to spin up the development environment and just test on it and then terminate you only pay for 1 or 2 hours the environment is live the old model way you would buy the server hardware you would be stuck with it.&lt;/p&gt;

&lt;h2 id=&quot;elastic-compute-cloud-pricing-options&quot;&gt;Elastic Compute Cloud Pricing Options&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;free-tier-&quot;&gt;Free Tier –&lt;/h5&gt;
    &lt;p&gt;you get 735 hours free on certain micro instances.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;on-demand-&quot;&gt;On Demand –&lt;/h5&gt;
    &lt;p&gt;Which allow you to pay a fixed rate by the hour with no commitment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;reserved-&quot;&gt;Reserved –&lt;/h5&gt;
    &lt;p&gt;Which provide you with a capacity reservation, and offer a significant discount on the hourly charge for an instance. Then you have 1 Year or 3 Year Terms so reserved just saying i need 10 servers of this size and i am willing to pay either up-front contractual willing to commit for 1 to 3 years and if you do use reserved instances then you get massive discounts compared with on demand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;spot-&quot;&gt;Spot –&lt;/h5&gt;
    &lt;p&gt;This is enable you to bid whatever price you want to pay for instance capacity, providing for even greater savings if your applications have flexible start and end times.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;elastic-compute-cloud-on-demand-vs-reserved-vs-spot&quot;&gt;Elastic Compute Cloud On Demand vs Reserved vs Spot&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;on-demand-instances&quot;&gt;On Demand Instances&lt;/h5&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span&gt;Users that want the low cost and flexibility of Amazon EC2 without any up-front payment or long-term commitment.&lt;/span&gt;
&lt;span&gt;Applications with short term, spike, or unpredictable workloads that cannot be interrupted.&lt;/span&gt;
&lt;span&gt;Applications being developed or tested on Amazon EC2 for the first time.&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;reserved-instances&quot;&gt;Reserved Instances&lt;/h5&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span&gt;Applications with steady state or predictable usage so reserved might be your 3 or 4 web servers that you always want to turned on and then your on demand instances might be is the part of an auto scaling event.&lt;/span&gt;
&lt;span&gt;Applications that require reserved capacity.&lt;/span&gt;
&lt;span&gt;Users able to make upfront payment to reduce their total computing costs even further.&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;spot-instances&quot;&gt;Spot Instances&lt;/h5&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span&gt;  Applications that have flexible start and end times.&lt;/span&gt;
&lt;span&gt;Applications that are only feasible at very low compute prices.&lt;/span&gt;
&lt;span&gt;Users with urgent computing needs for large amounts  of additional capacity.&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;elastic-compute-cloud-on-demand-instances&quot;&gt;Elastic Compute Cloud On Demand Instances&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;General Purpose Instances&lt;/li&gt;
  &lt;li&gt;Compute Optimized Instances
 &lt;span&gt;Compute Intensive Applications&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Memory Optimized Instances
  &lt;span&gt;Database &amp;amp; Memory Caching Applications&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;GPU Instances Instances
  &lt;span&gt;High Performance Parallel Computing (eg Hadoop)&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Storage Optimized Instances
  &lt;span&gt;Data warehousing and Parallel Computing&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;local-instance-storage-vs-elastic-block-storage&quot;&gt;Local Instance Storage vs Elastic Block Storage&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Local Instance Storage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span&gt;Data stored on a local instance store will persist only as long as that instance is alive. So you terminate that Instances you loose all the data on that virtual hardware.&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Elastic Block Storage Backed Storage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span&gt;Data that is stored on an Amazon Elastic Block Storage volume will persist independently of the life of the instance.&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;storage-backed-by-elastic-block-storage&quot;&gt;Storage backed by Elastic Block Storage&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Provisioned IOPS Solid State Drive&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span&gt;Designed for I/O intensive applications such as large relational or No-SQL databases.&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;General purpose Solid State Drive&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span&gt;Designed for 99.999% availability.&lt;/span&gt;
&lt;span&gt;Ratio of 3 IOPS per GB, offer single digit millisecond latency, and also have the ability to burst up to 3000 IOPS for short periods.&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;magnetic&quot;&gt;Magnetic&lt;/h5&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span&gt;Lowest cost per gigabyte of all Elastic Block Storage volume types. Magnetic volumes are ideal for workloads where data is accessed infrequently, and applications where the lowest storage cost is important.&lt;/span&gt;&lt;/p&gt;</content><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><category term="ec2" /><category term="amazon" /><category term="aws" /><category term="service" /><category term="pricing" /><summary>Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides re-sizable compute capacity in the cloud.</summary></entry><entry><title>Amazon Lambda - Serverless technology</title><link href="https://abcdevops.com/blog/2016/02/29/amazon-lambda.html" rel="alternate" type="text/html" title="Amazon Lambda - Serverless technology" /><published>2016-02-29T00:00:00-05:00</published><updated>2016-02-29T00:00:00-05:00</updated><id>https://abcdevops.com/blog/2016/02/29/amazon-lambda</id><content type="html" xml:base="https://abcdevops.com/blog/2016/02/29/amazon-lambda.html">&lt;h2 id=&quot;what-is-lambda&quot;&gt;What is Lambda?&lt;/h2&gt;

&lt;p&gt;AWS Lambda is a compute service that runs your code in response to events and automatically manages the underlying compute resources. So you don’t have to worry about server infrastructure all you have to worry about is code and you can design your code respond automatically to events.
&lt;!--more--&gt;
AWS Lambda can automatically run code in response to modifications to objects in Amazon S3 buckets, messages arriving in Amazon Kinesis streams, or table updates in Amazon DynamoDb.&lt;/p&gt;

&lt;p&gt;Lambda runs your code on high-availability compute infrastructure and performs all the administration of the compute resources, including server and operating system maintenance, capacity provisioning and automatic scaling, code and security patch deployment, and code monitoring and logging.&lt;/p&gt;

&lt;p&gt;All you need to do is supply the code.&lt;/p&gt;

&lt;h2 id=&quot;what-events-trigger-lambda&quot;&gt;What Events Trigger Lambda?&lt;/h2&gt;

&lt;p&gt;You can use AWS Lambda to respond to table updates in Amazon DynamoDB, modifications to objects in Amazon S3 buckets, messages arriving in an Amazon Kinesis stream, AWS API calls logs created by AWS Cloud Trail, and custom events from mobile applications, web applications, or other web services.&lt;/p&gt;

&lt;h2 id=&quot;lambda-pricing&quot;&gt;Lambda Pricing&lt;/h2&gt;

&lt;p&gt;So pricing is broken down into two bits Requests based and Duration based. So if we start with requests you get first 1 million requests are free to the Lambda service and then you are paying $0.20 per 1 million requests thereafter.&lt;/p&gt;

&lt;p&gt;Duration is calculated from the time your code begins executing until it returns or otherwise terminates, and it’s rounded up to the nearest 100ms. The price depends on the amount of memory you allocate to your function. You are charged $0.00001667 for every GB-second used.&lt;/p&gt;

&lt;p&gt;In terms of your free tier&lt;/p&gt;

&lt;p&gt;1M free requests per month and 400,000 GB-seconds of compute time per month. The memory size you choose for your Lambda functions determines how long they can run in the free tier. The Lambda free tier does not automatically expire at the end of your 12 month AWS Free Tier term, but is available in both existing and new AWS customers indefinitely.&lt;/p&gt;</content><author><name>Tarun Jangra</name><email>tarun.jangra@abcdevops.com</email></author><category term="serverless" /><category term="lambda" /><category term="amazon" /><category term="aws" /><category term="service" /><category term="pricing" /><summary>What is Lambda?

AWS Lambda is a compute service that runs your code in response to events and automatically manages the underlying compute resources. So you don’t have to worry about server infrastructure all you have to worry about is code and you can design your code respond automatically to events.</summary></entry></feed>
